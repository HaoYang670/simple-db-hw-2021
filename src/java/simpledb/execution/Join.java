package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate p;
    private OpIterator outerChild;
    private OpIterator innerChild;
    private Tuple outerTuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.outerChild = child1;
        this.innerChild = child2;
        this.outerTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return outerChild.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return innerChild.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(outerChild.getTupleDesc(), innerChild.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        outerChild.open();
        innerChild.open();
        super.open();
    }

    public void close() {
        // some code goes here
        outerChild.close();
        innerChild.close();
        this.outerTuple = null;
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        outerChild.rewind();
        innerChild.rewind();
        this.outerTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        Tuple mergedTuple = null;

        // outerTuple == null means: last inner loop has finished.
        while((outerTuple != null) || outerChild.hasNext()){
            // start next inner loop
            if(outerTuple == null) {
                outerTuple = outerChild.next();
                innerChild.rewind();
            }

            while(innerChild.hasNext()){
                Tuple innerTuple = innerChild.next();

                if(p.filter(outerTuple, innerTuple)){
                    mergedTuple = Tuple.merge(outerTuple, innerTuple);
                    break;
                }
            }

            // the current inner loop finishes
            if(!innerChild.hasNext()) outerTuple = null;
            // if find next tuple, break 
            if(mergedTuple != null) break;
        }

        return mergedTuple;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] {outerChild, innerChild};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        outerChild = children[0];
        innerChild = children[1];
    }
}
